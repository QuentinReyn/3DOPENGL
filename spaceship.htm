<html>
<head>
    <title>SpaceShip</title>
    <meta http-equiv="content-type" content="text/html; charset=windows-1252">
    <link rel="stylesheet" href="style.css">
    <script type="text/javascript" src="gl-matrix.js"></script>
    <script type="text/javascript" src="game-utils.js"></script>
    <script type="text/javascript" src="fbo.js"></script>
    <script type="text/javascript" src="background.js"></script>
    <script type="text/javascript" src="modelObj.js"></script>
    <script type="text/javascript" src="splat.js"></script>
    <script type="text/javascript" src="ennemy.js"></script>

    <script id="background-vs" type="x-shader/x-vertex">#version 300 es
      // *** le vertex shader *** 
      layout(location=0) in vec3 aVertexPosition; // la position du sommet 
      layout(location=1) in vec2 aVertexCoord; // sa coordonnee de texture 

      out vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

      void main(void) {
          //projection de la position
          gl_Position = vec4(aVertexPosition, 1.0);

          // stockage de la coordonnee de texture
          vTextureCoord = aVertexCoord;
      }

    </script>

    <script id="background-fs" type="x-shader/x-fragment">#version 300 es
      // *** le fragment shader ***
      precision highp float; // precision des nombres flottant
      
      uniform vec2 uOffset;
      uniform float uAmplitude; // amplitude du bruit
      uniform float uFrequency; // frequence du bruit
      uniform float uPersistence; // persistence du bruit
      
    in vec2 vTextureCoord; // recuperation de la coord rasterisee
      out vec4 outColor;

      vec2 hash22(vec2 p) {
	  vec2 q = vec2(dot(p,vec2(127.1,311.7)), 
			dot(p,vec2(269.5,183.3)));
	  return fract(sin(q)*43758.5453123)*2.-1.;
      }

      float gnoise(in vec2 x) {
	  vec2 p = floor(x);
	  vec2 f = fract(x);
	  vec2 m = f*f*(3.-2.*f);
	  
	  return mix(
	      mix(dot(hash22(p+vec2(0.,0.)),f-vec2(0.,0.)),
		  dot(hash22(p+vec2(1.,0.)),f-vec2(1.,0.)),m.x),
	      mix(dot(hash22(p+vec2(0.,1.)),f-vec2(0.,1.)),
		  dot(hash22(p+vec2(1.,1.)),f-vec2(1.,1.)),m.x),m.y);
      }
      
      float fractalNoise(in vec2 p) {
       	  const int nb = 5; // nb octave
       	  float f = uFrequency; // frequency
       	  float a = uAmplitude; // amplitude
       	  float e = uPersistence; // persistence

       	  float n = 0.0;
       	  for(int i=0;i<nb;++i) {
              n = n + a*gnoise(p*f);
              f = 4.0*f;
              a = a*e;
       	  }
       	  return n;
      }


      float computeHeight(in vec2 p){
        // vous pouvez modifier cette fonction comme vous
        // le souhaitez pour fabriquer votre propre background
        float test = sin(p.x*5.0)*sin(p.y*5.0);
        test = (fractalNoise(p)+3.0*test)*0.5+0.5;
    
        vec3 col1 = vec3(0.8,0.75,0.75);
        vec3 col2 = vec3(0.92,0.95,0.95);
    
        if(test<-0.5){
          test=0.0;
        }
    
             return test;
          }


      vec3 computeNormal(in vec2 p) {
      vec3 tmp =vec3(0.0);
	  float scale = 70.0;
	  float xp = computeHeight(p+vec2( 0.001,0.0));
	  float xm = computeHeight(p+vec2(-0.001,0.0));
	  float yp = computeHeight(p+vec2(0.0, 0.001));
	  float ym = computeHeight(p+vec2(0.0,-0.001));
	  
	  float gx = 0.5*(xp-xm)*scale;
	  float gy = 0.5*(yp-ym)*scale;

	  vec3 v1 = normalize(vec3(1.0,0.0,gx));
	  vec3 v2 = normalize(vec3(0.0,1.0,gy));

	  return cross(v1,v2);
      }
      
      void main(void) {
        vec3 Kd = vec3(0.4,0.3,0.55);
        vec3 Ks = vec3(0.0);
        float s = 100.0;
    // d�calage avec la variable uOffset
	  vec2 p = vTextureCoord*2.0-vec2(1.0)+uOffset;

	  float u = computeHeight(p);
	  vec3 n = computeNormal(p); // normale au point p

    vec3 l = vec3(sin(uOffset.y),0.5,cos(uOffset.y));
    vec3 v = vec3(0.0,0.2,1.0);
    vec3 r = reflect(-l,n);
	  // affichage de la profondeur
	  outColor = vec4(u,u,u,1.0);

    float diff = max(dot(n,l)*0.5+0.5,0.0);
    float spec = pow(max(dot(r,v),0.0),s);
    // affichage de la normale
    
	  outColor = vec4(Kd*diff+Ks*spec,1.0);
      }
      

    </script>

    <script id="model-vs" type="x-shader/x-vertex">#version 300 es
      // *** le vertex shader *** 
      layout(location=0) in vec3 aVertexPosition;
      layout(location=1) in vec3 aVertexNormal;
      
      uniform mat4 uModelMatrix;
      uniform mat4 uViewMatrix;
      uniform mat4 uProjMatrix;
      
      out vec3 vNormal;

      void main(void) {
          // projection de la position
          gl_Position = uProjMatrix * uViewMatrix * uModelMatrix * vec4(aVertexPosition, 1.0);
          vNormal = mat3(inverse(transpose(uViewMatrix * uModelMatrix)))*normalize(aVertexNormal);
      }

    </script>

    <script id="model-fs" type="x-shader/x-fragment">#version 300 es
      // *** le fragment shader ***
      precision mediump float; // precision des nombres flottant
      
    in vec3 vNormal;
      out vec4 outColor;

      void main(void) {
          // la couleur est attribuee au fragment courant
	  vec3 n = normalize(vNormal);

	  // pour le moment, on affiche juste la normale
          outColor = vec4(n,1.);
      }

    </script>

    <script id="splat-vs" type="x-shader/x-vertex">#version 300 es
      // *** le vertex shader ***
      layout(location=0) in vec3 aVertexPosition; // la position du sommet
      layout(location=1) in vec2 aVertexCoord; // sa coordonnee de texture

      uniform vec3 uPosition; // position du vaisseau
      out vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

      void main(void) {
	  // projection de la position
	  gl_Position = vec4(aVertexPosition.xy+uPosition.xy,uPosition.z, 1.0);

	  // stockage de la coordonnee de texture
	  vTextureCoord = aVertexCoord;
      }

    </script>

    <script id="splat-fs" type="x-shader/x-fragment">#version 300 es
      // *** le fragment shader ***
      precision highp float; // precision des nombres flottant

      uniform vec3 maCouleur;
      uniform sampler2D uTex;

    in vec2 vTextureCoord; // recuperation de la coord rasterisee
      out vec4 outColor;

      void main(void) {
	  float alpha = 1.-smoothstep(0.2,0.25,distance(vec2(.5),vTextureCoord));

	  // TEST: affichae d'un point avec la couleur donn�e en param�tre
	  //outColor = vec4(alpha*maCouleur,alpha);

	  // TEST: affichage d'une texture donn�e en param�tre
	  outColor = texture(uTex,vTextureCoord);
      }

    </script>

    <script id="ennemy-vs" type="x-shader/x-vertex">#version 300 es
      // *** le vertex shader ***
      layout(location=0) in vec3 aVertexPosition; // la position du sommet
      layout(location=1) in vec2 aVertexCoord; // sa coordonnee de texture

      uniform vec3 uPosition; // position du vaisseau
      out vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

      void main(void) {
	  // projection de la position
	  gl_Position = vec4(aVertexPosition.xy+uPosition.xy,uPosition.z, 1.0);

	  // stockage de la coordonnee de texture
	  vTextureCoord = aVertexCoord;
      }

    </script>

    <script id="ennemy-fs" type="x-shader/x-fragment">#version 300 es
      // *** le fragment shader ***
      precision highp float; // precision des nombres flottant

      uniform vec3 ennemyCouleur;
      uniform sampler2D ennemyTex;

    in vec2 vTextureCoord; // recuperation de la coord rasterisee
      out vec4 outColor;

      void main(void) {
	  float alpha = 1.-smoothstep(0.2,0.25,distance(vec2(.5),vTextureCoord));

	  // TEST: affichae d'un point avec la couleur donn�e en param�tre
	  //outColor = vec4(alpha*ennemyCouleur,alpha);

	  // TEST: affichage d'une texture donn�e en param�tre
	  outColor = texture(ennemyTex,vTextureCoord);
      }

    </script>

    <script type="text/javascript">

        var background;
        var spaceship;
        var ennemy;
        var ennemies = [];
        //var shootSample;
        var shootSampleArray = [];
        var tex;
        var lastTimeRocket = 0;
        var texturesExplosions = [];
        var texEnnemy ;
        var actualScore = 0;


        function drawScene() {
            // initialisation du viewport
            gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);

            // efface les buffers de couleur et de profondeur
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

            // dessin du fond (d�commenter pour travailler dessus)
            gl.useProgram(background.shader());
            background.sendUniformVariables();
            background.draw();

            // dessin du vaisseau
            gl.useProgram(spaceship.shader());
            spaceship.sendUniformVariables();
            spaceship.draw();

            // test pour afficher un splat quand on appuie sur espace
            gl.enable(gl.BLEND); // transparence activ�e
            var ennemiesCount = 0;
            var xEnnemy = -0.9;
            var yEnnemy = 0.1;
            for (ennemiesCount; ennemiesCount < ennemies.length; ennemiesCount++) {
                if (ennemies[ennemiesCount] != null) {
                    gl.useProgram(ennemies[ennemiesCount].shader());
                    ennemies[ennemiesCount].sendUniformVariables();
                    ennemies[ennemiesCount].draw();

                    //console.log(ennemies)

                }
            }

            var countSplat;
            for (countSplat = 0; countSplat < shootSampleArray.length; countSplat++) {
                if (shootSampleArray.length != 0) {
                    gl.useProgram(shootSampleArray[countSplat].shader());
                    shootSampleArray[countSplat].sendUniformVariables();
                    shootSampleArray[countSplat].draw();
                }

            }

            gl.disable(gl.BLEND); // transparence d�sactiv�e
        }

        // une bonne maniere de gerer les evenements claviers
        var currentlyPressedKeys = {};

        function handleKeyDown(event) {
            currentlyPressedKeys[event.keyCode] = true;
        }


        function handleKeyUp(event) {
            currentlyPressedKeys[event.keyCode] = false;
        }

        function handleKeys() {
            // vous pouvez utiliser ce genre de fonction
            // pour faire bouger votre vaisseau
            // par exemple :
            var timeNow = new Date().getTime();
            if (currentlyPressedKeys[68]) { // D
                spaceship.move(1, 0);
            }

            if (currentlyPressedKeys[81]) { // Q
                spaceship.move(-1, 0);
            }

            if (currentlyPressedKeys[90]) { // Z
                spaceship.move(0, 1);
            }

            if (currentlyPressedKeys[83]) { // S
                spaceship.move(0, -1);
            }

            if (currentlyPressedKeys[77]) { // M
                // juste un test pour supprimer un splat (tir)
                shootSample.clear();
            }

            if (currentlyPressedKeys[32]) { // SPACE
                var elapsed = timeNow - lastTimeRocket;
                if (elapsed >= 400) {//400 valeur cadence ms
                    inputSplat();
                    lastTimeRocket = timeNow;
                }
            }

            function inputSplat() {

                var shootSample;
                shootSample = new Splat(tex);
                // SPACE
                // exemple: comment positionner un splat devant le vaisseau
                var p = spaceship.getBBox(); // boite englobante du vaisseau sur l'�cran
                var x = (p[0][0] + p[1][0]) / 2;
                var y = p[1][1];
                var z = p[1][2] + 0.005; // profondeur du splat (juste derri�re le vaisseau)

                shootSample.setPosition(x, y, z);
                shootSampleArray.push(shootSample);
            }



        }

        function mouseMove(event) {
            // recup evenement souris
            var newx = 2.0 * (event.clientX / gl.viewportWidth) - 1.0;
            var newy = -(2.0 * (event.clientY / gl.viewportHeight) - 1.0);
        }


        // animation
        var lastTime = 0;

        function animate() {
            // fonction appel�e � chaque frame, permet d'animer la sc�ne
            var timeNow = new Date().getTime();
            if (lastTime != 0) {
                // anime chacun des objets de la scene
                // si necessaire (en fonction du temps ecoul�)
                var elapsed = timeNow - lastTime;
                spaceship.setParameters(elapsed);
                background.setParameters(elapsed);
                for (countSplat = 0; countSplat < shootSampleArray.length; countSplat++) {
                    if (shootSampleArray.length > 0) {
                        shootSampleArray[countSplat].setParameters(elapsed);
                    }

                }




                for (var e = 0; e < ennemies.length; e++) {
                    if (ennemies[e] != null) {
                        ennemies[e].setParameters(elapsed);

                    }
                    //console.log("pos ennemy en x: "+ennemies[0].position[0] + "pos tir x: "+shootSample.position[0] + "pos ennemy en y: "+ennemies[0].position[1] + "pos tir y: "+shootSample.position[1]);
                }
                //console.log(ennemies.length);

                var s = spaceship.getBBox(); // boite englobante du vaisseau sur l'écran
                var x1 = s[0][0];
                var x2 = s[1][0];
                var y1 = s[0][1];
                var y2 = s[1][1];
                for (var ennemyCount = 0; ennemyCount < ennemies.length; ennemyCount++) {
                    if (ennemies[ennemyCount] != null) {
                        if (ennemies[ennemyCount].position[0] < x1 && ennemies[ennemyCount].position[0] > x2 && ennemies[ennemyCount].position[1] > y1 && ennemies[ennemyCount].position[1] < y2) {
                            console.log("GAME OVER");
                        }
                    }
                    for (var tirCount = 0; tirCount < shootSampleArray.length; tirCount++) {
                        if (ennemies[ennemyCount] != null) {
                            if (isCollision(ennemies[ennemyCount], shootSampleArray[tirCount])) {
                                if (ennemies[ennemyCount].isExploded == false){

                                    ennemies[ennemyCount].setIsExploded(true);

                                    actualScore++;

                                    setScore(actualScore);
                                    loadExplosion(ennemyCount);

                                    shootSampleArray[tirCount].clear();
                                    shootSampleArray.shift();
                                    //ennemies[ennemyCount].clear();
                                    //ennemies.splice(ennemyCount,1);
                                }
                            } else if (shootSampleArray[tirCount].position[1] > 1.0) {
                                shootSampleArray[tirCount].clear();
                                shootSampleArray.shift();
                            }
                        }
                    }
                /*    if(ennemies[ennemyCount] != null) { // to remove ennemy if it's position goes after -1.0
                        if(ennemies[ennemyCount].position[1] < -1.0){
                                ennemies[ennemyCount].clear();
                                ennemies.splice(ennemyCount,1);
                        }
                    }*/
                }
            }
            lastTime = timeNow;


        }

        function loadExplosion(ennemyCOunt) {
            const result = setExplosion(ennemyCOunt)

        }

        function setExplosion(ennemyCount) {
            return new Promise(resolve => {
                var e = 0;
                const id = setInterval(() => {
                    if (e < 46) {
                        //console.log(e)
                        ennemies[ennemyCount].setTexture(texturesExplosions[e]);
                        gl.useProgram(ennemies[ennemyCount].shader());
                        ennemies[ennemyCount].sendUniformVariables();
                        ennemies[ennemyCount].draw();
                        e = e + 1;

                    } else if (e == 46) {
                        ennemies[ennemyCount].setTexture(texturesExplosions[e]);
                        gl.useProgram(ennemies[ennemyCount].shader());
                        ennemies[ennemyCount].sendUniformVariables();
                        ennemies[ennemyCount].draw();
                        ennemies[ennemyCount].clear();
                        ennemies[ennemyCount] = null;
                        //console.log(ennemies)
                        clearInterval(id)
                        resolve(id)
                    }

                }, 20)
            });

        }

        function initTextureExplosion() {
            for (var e = 1; e <= 47; e++) {
                if (e < 10) {
                    var textureLocal = initTexture('textures/explosion/images/sprite_0' + e + '.png')
                } else {
                    var textureLocal = initTexture('textures/explosion/images/sprite_' + e + '.png')
                }
                texturesExplosions.push(textureLocal)
            }
        }

        function isCollisionBetweenEnnemyAndSpaceship(ennemy,spaceship){
            var isCollided = false;
            var ennemyP = ennemy.position;
            var ennemyR = ennemy.height / 2; // rayon
            var spaceshipP = spaceship.position;
            var spaceshipR = spaceship.height / 2; // rayon
            //console.log("position x du tir: "+ tirP[0]);
            //console.log("position x de l'ennemy: "+ ennemyP[0]);

            var dist = Math.sqrt(((spaceshipP[0] - ennemyP[0]) * (spaceshipP[0] - ennemyP[0])) + ((spaceshipP[1] - ennemyP[1]) * (spaceshipP[1] - ennemyP[1])));
            //console.log("dist: "+dist+ "  rayon:"+(tirR+ennemyR));
            if (dist <= (spaceshipR + ennemyR)) {
                isCollided = true;
            }
            return isCollided;
        }

        function isCollision(ennemy, tir) {
            var isCollided = false;
            var ennemyP = ennemy.position;
            var ennemyR = ennemy.height / 2;
            var tirP = tir.position;
            var tirR = tir.height / 2;
            var dist = Math.sqrt(((tirP[0] - ennemyP[0]) * (tirP[0] - ennemyP[0])) + ((tirP[1] - ennemyP[1]) * (tirP[1] - ennemyP[1])));
            if (dist <= (tirR + ennemyR)) {
                isCollided = true;
            }
            return isCollided;
        }

        var spawnRate = 1000;

        function setScore(score){
            var canvas = document.getElementById("actualScore");
            canvas.innerHTML = "Score : "+score;
        }

        function loadEnnemies(){
           return new Promise(resolve=>{
                setInterval(()=>{
                    ennemy = new Ennemy(texEnnemy);
                    var xRandom =  Math.random() * (0.8 - (-0.8)) + (-0.8);
                    ennemy.setPosition(xRandom,ennemy.position[1],0);
                    ennemy.setIsExploded(false);
                    ennemies.push(ennemy);
                },spawnRate)
           });
        }

        function tick() {
            requestAnimFrame(tick);

            handleKeys();
            drawScene();
            animate();
        }


        function webGLStart() {
            // initialisation du canvas et des objets OpenGL

            var canvas = document.getElementById("SpaceShip");
          //  var ctx = canvas.getContext("2d");
           // ctx.fillStyle = "blue";
            initGL(canvas);

            // test: cr�ation d'une texture
            //var tex = initTexture('textures/missile.png');
            texEnnemy = initTexture('textures/ennemysplat.png')
            initBackgroundShader();
            initModelShader();
            initSplatShader();
            initEnnemyShader();
            initTextureExplosion();
            tex = initTexture('textures/missile.png');

            //heightfield = new Heightfield();
            background = new Background();
            spaceship = new Model('models/plane.obj');
            shootSample = new Splat(tex);

            // la couleur de fond sera grise fonc�e
            gl.clearColor(0.5, 0.5, 0.5, 1.0);

            // active le test de profondeur
            gl.enable(gl.DEPTH_TEST);

            // fonction de m�lange utilis�e pour la transparence
            gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);

            /* Mouse and keyboard interaction functions */
            //canvas.addEventListener('mousedown', tbMouseDown, true);
            //canvas.addEventListener('mousemove', mouseMove, true);
            //canvas.addEventListener('mouseup', tbMouseUp, true);
            document.onkeydown = handleKeyDown;
            document.onkeyup = handleKeyUp;

            // dessine la scene
            loadEnnemies();
            tick();
        }


    </script>


</head>


<body>
<div class="game">
    <div class="header" id="title">
        <span>Pepe la grenouille verte INVADERS</span>
    </div>
    <div class="spaceShipBloc">
        <canvas id="SpaceShip" style="border: none; " width="600" height="600"></canvas>
    </div>
    <link href='https://fonts.googleapis.com/css?family=Lato:300,400,700' rel='stylesheet' type='text/css'>
    <div id='stars'></div>
    <div id='stars2'></div>
    <div id='stars3'></div>

    <div class="stat">
        <span class="title">HighScore</span>
        <div class="score">
            <div class="playerScore">
                <span>Quentin</span>
                <span>12550520</span>
            </div>
        </div>
    </div>

    <div class="menuAction">
        <div class="actionButtons">
            <button onclick="webGLStart()">Start</button>
            <button>Reset</button>
            <button>Cancel</button>
        </div>
        <div class="actualScore" id="actualScore">

        </div>
    </div>
</div>

</body>
</html>
